apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group = 'geb.mobile'
version = new ProjectVersion(1, 0, "0")
ext.gebVersion = '0.10.0'
ext.seleniumVersion = '2.45.0'
ext.spockVersion = '1.0-groovy-2.4'
ext.groovyVersion = '2.4.1'
ext.selendroidVersion = '0.11.0'
ext.appiumClientVersion = '3.1.0'
ext.iosClientVersion =  '0.6+'

repositories {
    mavenCentral()
}

configurations {
    selendroid
    iosdriver
}

dependencies {

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "org.slf4j:slf4j-api:1.7.6"
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    compile("org.gebish:geb-spock:$gebVersion") {
        exclude module: "groovy"
        exclude module: "groovy-all"
    }
    compile("org.spockframework:spock-core:$spockVersion") {
        exclude module: "junit"
        exclude module: "groovy"
        exclude module: "groovy-all"
    }

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    compile("org.spockframework:spock-core:$spockVersion") {
        exclude module: "groovy"
        exclude module: "groovy-all"
    }


    compile "io.selendroid:selendroid-standalone:$selendroidVersion"
    compile "io.selendroid:selendroid-client:$selendroidVersion"
    compile "org.uiautomation:ios-client:$iosClientVersion"
    compile ("io.appium:java-client:$appiumClientVersion")

    selendroid "io.selendroid:selendroid-standalone:${selendroidVersion}"

    iosdriver "org.uiautomation:ios-server:0.6+"
    //compile "org.uiautomation:ios-server:0.6+"

//    appium ("io.appium:java-client:$appiumClientVersion") {
//        exclude module: "selenium-java"
//    }
}

jar {
    manifest {
        attributes ( 'Implementation-Title': 'geb-mobile',
                'Implementation-Version': version )
    }
    doFirst {
        from(configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
            // remove all signature files
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }
    }
}


def startServer = { server, command ->
    if( System.properties.'skipServer')  { println "Skipping Server $server "; return }
    println "Starting $server with $command"
    ProcessBuilder builder = new ProcessBuilder(command.split(' '))
    builder.redirectErrorStream(true)
    builder.directory(buildDir)
    Process process = builder.start()
    project.ext[server] = process
    println "$server started : $process"
    def loggingThread = Thread.start("logging-$server") {
        FileOutputStream fout = new FileOutputStream(new File(buildDir, "${server}.log"))
        int bb
        while ((bb = process.getInputStream().read()) > 0) {
            fout.write(bb)
        }
    }
    if(System.getProperty("waitForServer")){
        println "Joining Server Logging Thread"
        loggingThread.join()
    }
}

def stopServer = { server ->
    println "Stopping $server"
    if (project.ext.has(server)) {
        Process process = ext.get(server)
        println "send CTRL-C to server"
        try {
            process.getOutputStream().write(3)
            process.getOutputStream().flush()
        }catch(e){ }
        process.destroy()
    } else {
        println "No Server $server found in process list"
    }
}

task startSelendroid(group:'Server') << {
    startServer( "SERVER_SELENDROID" , "java -cp ${configurations.selendroid.files.toList().join(":")} io.selendroid.SelendroidLauncher -port 4444 -aut ${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk")
}

task startSelendroidForWeb(group:'Server') << {
    startServer( "SERVER_SELENDROID_WEB" , "java -cp ${configurations.selendroid.files.toList().join(":")} io.selendroid.SelendroidLauncher -port 4444")
}

task startAppium(group:'Server') << {
    startServer("SERVER_APPIUM", "appium --command-timeout 90000")
}

task startIosdriver(group:'Server') << {
    startServer( "SERVER_IOSDRIVER", "java -Djava.util.logging.config.file=${projectDir}/config/iosdriver_logging.properties -cp ${configurations.iosdriver.files.toList().join(":")} org.uiautomation.ios.server.IOSServer -beta -simulators" )
}

task stopServers(group:'Server') << {
    project.ext.properties.each{k,v ->
        if( k=~/^SERVER_/ && project.ext.has(k) ) stopServer(k)
    }
}

task runSelendroidTests(group:'Android',type: Test, dependsOn: [startSelendroid]) {

    systemProperty "framework", "selendroid"
    systemProperty "appUT_absolutePath", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appUT.version", "0.10.0"
    systemProperty "appUT_cap_Emulator", "false"
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

task runAppiumTests(group:'Android',type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"

    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appium_deviceName" , "Android"
    //To run the test on a specific device
    //System.setProperty("appium_udid","192.168.56.10:5555")
    //System.setProperty("appium_automationName","selendroid")

    //Use Appium
    include '**/UIAutomatorNavigatorTestWithPagesSpec.*'
}

task runAppiumTestsWithSelendroidDriver(group:'Android', type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"
    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appium_automationName", "selendroid"

    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

task runAppiumTestsWithOldDevice(group:'Android', type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"
    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"

    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

task runIosdriverTests(group: 'Ios', type: Test, dependsOn: [startIosdriver] ) {
    systemProperty "appUT.package", "UICatalog"
    systemProperty "iosdriver_app" , ""
    include '**/UICatalogAppSpec.*'
}

task runIosdriverInitTests(group:'Ios', type:Test, dependsOn: [startIosdriver]){
    include '**/SimpleIosMobileTest.*'
}

task runIosdriverInitTestsReal(group:'Ios', type:Test, dependsOn: [startIosdriver]){
    include '**/SimpleIosMobileTest.*'
}


tasks.withType(Test){ task->
    onlyIf { !Boolean.getBoolean('skip.tests') }
    ignoreFailures = true
    outputs.upToDateWhen{ false }
    doLast{
        stopServers.execute()
    }
}

test {
    // for now there aren't any unit tests, just device tests, so call them with the appropriate task
    exclude "**/*"
}

ext.sauceLabsUser = this.hasProperty("sauceLabsUser") ? sauceLabsUser : System.getProperty("sauceLabsUser", System.getenv("SAUCE_USERNAME"))
ext.sauceLabsKey  = this.hasProperty("sauceLabsKey") ? sauceLabsKey : System.getProperty("sauceLabsKey", System.getenv("SAUCE_ACCESS_KEY"))

println "sauceLabsUser: ${ext.sauceLabsUser}"
println "sauceLabsKey: ${ext.sauceLabsKey}"

ext.saucelabsUrl  = "http://${sauceLabsUser}:${sauceLabsKey}@ondemand.saucelabs.com:80/wd/hub"


task appiumOnSauceLabs(type: Test) {
    systemProperty "framework","appium"
    systemProperty "appium_app","sauce-storage:selendroid-test-app-0.9.0.apk"
    systemProperty "appium_appPackage" , "io.selendroid.testapp"
    systemProperty "selenium.url", saucelabsUrl
    systemProperty "appium_platformName","Android"
    systemProperty "appium_deviceName","LG Nexus 4 Emulator"
    systemProperty "appium_platformVersion","4.4"
    systemProperty "appium_appium-version","1.3.7"
    include '**/UIAutomatorNavigatorTestWithPagesSpec.*'
}

task uploadApk2Saucelabs(type:Exec){
    commandLine = ['curl', '-u', "$sauceLabsUser:$sauceLabsKey", '-X', 'POST', "http://saucelabs.com/rest/v1/storage/$sauceLabsUser/selendroid-test-app-0.9.0.apk?overwrite=true", '-H', 'Content-Type: application/octet-stream', '--data-binary', "@${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk" ]
}

ext.testobjectApiKey = System.getProperty("testobjectApiKey", System.getenv("TESTOBJECT_APIKEY"))
ext.testobjectUrl = System.getProperty("testobjectUrl", 'https://app.testobject.com:443/api/appium/wd/hub')

task appiumOnTestObjects(type: Test) {
    systemProperty "framework", "appium"
    systemProperty "selenium.url", testobjectUrl
    systemProperty "appium_appPackage" , "io.selendroid.testapp"       //important for testobject test, cause this value is not yet set on there side
    systemProperty 'appium_testobject_api_key', testobjectApiKey
    systemProperty 'appium_testobject_project', 'selendroid-test-app'
    systemProperty 'appium_testobject_app_id', '1'
    systemProperty 'appium_testobject_device', 'LG_Nexus_4_E960_real'
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'geb-mobile'

            from components.java
        }
    }
}
/*
    repositories {
        maven {
            url = version.toString().endsWith('SNAPSHOT') ? nexusSnapshotUrl : nexusReleaseUrl
            credentials {
                username = nexusUser
                password = nexusPassword
            }
        }
    }
}*/


// TODO:  figure out how to do this?
//apply from: '../gradle/versioning.gradle'

// start versioning.gradle
ext.buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')

class ProjectVersion {
    Integer major
    Integer minor
    String build

    ProjectVersion(Integer major, Integer minor, String build) {
        this.major = major
        this.minor = minor
        this.build = build
    }

    String toString() {
        String fullVersion = "$major.$minor"

        if (build) {
            fullVersion += ".$build"
        } else {
            fullVersion += "-SNAPSHOT"
        }

        fullVersion
    }
}
// stop versioning.gradle



